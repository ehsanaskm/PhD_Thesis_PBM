/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2015 Alberto Passalacqua
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is derivative work of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::populationBalanceSubModels::breakupKernels::luoModel

Description
    Luo breakup kernel. The minimum value of the abscissa after which the
    model is applied can be defined by the user or it is assumed to be 1.

SourceFiles
    luoModel.C

\*---------------------------------------------------------------------------*/

#ifndef luoModel_H
#define luoModel_H

#include "breakupKernel.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace populationBalanceSubModels
{
namespace breakupKernels
{

/*---------------------------------------------------------------------------*\
                    Class luoModel Declaration
\*---------------------------------------------------------------------------*/

class luoModel
:
    public breakupKernel
{
private:
    
    // Private data

        //- Minimum value of the abscissa to apply the model
        dimensionedScalar minAbscissa_;

        dimensionedScalar rhoa_;
        
        //- Liquid density
        dimensionedScalar rhob_;
        
         //- Surface tension liquid-gas
        dimensionedScalar sigma_; 
        
         //- Luo and Svendsen's model parameters    
		  scalar beta_; 

		  dimensionedScalar k_;


       dimensionedScalar residualAlpha_;
    
public:

        //- Runtime type information
        TypeName("luoModel");


    // Constructors

        //- Construct from components
        luoModel(const dictionary& dict);


    //- Destructor
    virtual ~luoModel();


    // Member Functions

        //- Breakup kernel
        virtual tmp<volScalarField> Kb
        (
            const volScalarField& abscissa
        ) const;

};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace breakupKernels
} // End namespace populationBalanceSubModels
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
